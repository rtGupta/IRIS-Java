/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UI.SysAdmin;

import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Enterprise.Enterprise911;
import Business.Enterprise.EnterpriseDirectory;
import Business.Network.Network;
import Business.Organization.OrganizationDirectory;
import Business.Role.Enterprise911.Enterprise911Admin;
import Business.Role.FirstResponder.FirstRespAdmin;
import Business.Role.HealthCare.HealthCareAdmin;
import Business.Role.Role;
import Business.Role.SystemAdminRole;
import Business.UserAccount.UserAccount;
import Business.UserAccount.UserAccountDirectory;
import Business.Utilities.Profile;
import UI.MainJFrame;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Date;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.JLayeredPane;
import javax.swing.JOptionPane;
import javax.swing.event.ListDataEvent;
import javax.swing.event.ListDataListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import org.apache.commons.collections4.CollectionUtils;
import org.apache.commons.lang3.StringUtils;

/**
 *
 * @author akshatajadhav
 */
public class AdminListJPanel extends javax.swing.JPanel {

    JLayeredPane mainPane;
    JLayeredPane workPane;
    EcoSystem system;
    ArrayList<Network> networkList;
    EnterpriseDirectory enterpriseDirectory;
    OrganizationDirectory organizationDirectory;
    Pattern emailPattern;
    Pattern phonePattern;
    Pattern passwordPattern;
    
    /**
     * Creates new form HosptialHomeJPanel
     */
    public AdminListJPanel(JLayeredPane mainPane, JLayeredPane workPane, EcoSystem system) {
        initComponents();
        this.mainPane = mainPane;
        this.workPane = workPane;
        this.system = system;
        this.networkList = system.getNetworkList();
        this.enterpriseDirectory = system.getNetworkList().get(0).getEnterpriseDirectory();
        
        String emailRegex = "^(.+)@(\\S+)$";
        emailPattern = Pattern.compile(emailRegex);
            
        String phoneRegex = "^\\d{10}$";
        phonePattern = Pattern.compile(phoneRegex);
            
            
        String passwordRegex = "^(?=.*[0-9])(?=.*[a-z])(?=.*[A-Z])(?=.*[!@#&()â€“[{}]:;',?/*~$^+=<>]).{8,20}$";
        passwordPattern = Pattern.compile(passwordRegex);
            
        
        radbtnMale.setActionCommand("Male");
        radbtnFemale.setActionCommand("Female");
        radbtnNotToSay.setActionCommand("PreferNotToSay");
        buttonGroup1.add(radbtnMale);
        buttonGroup1.add(radbtnFemale);
        buttonGroup1.add(radbtnNotToSay);

        populateEnterpriseCmbbox();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        EnterpriseADminJPanel = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblEnterpriseAdmin = new javax.swing.JTable();
        lblFirstName = new javax.swing.JLabel();
        lblLastName = new javax.swing.JLabel();
        lblEmail = new javax.swing.JLabel();
        lblPhoneNumber = new javax.swing.JLabel();
        lblDateOfBirth = new javax.swing.JLabel();
        lblAddress = new javax.swing.JLabel();
        lblWorkAddress = new javax.swing.JLabel();
        lblGender = new javax.swing.JLabel();
        txtFirstName = new javax.swing.JTextField();
        txtEmail = new javax.swing.JTextField();
        txtDateOfBirth = new javax.swing.JTextField();
        txtAddress = new javax.swing.JTextField();
        txtWorkAddress = new javax.swing.JTextField();
        txtLastName = new javax.swing.JTextField();
        txtPhoneNumber = new javax.swing.JTextField();
        radbtnMale = new javax.swing.JRadioButton();
        radbtnFemale = new javax.swing.JRadioButton();
        radbtnNotToSay = new javax.swing.JRadioButton();
        btnUpdateAdmin = new javax.swing.JButton();
        btnCreateAdmin = new javax.swing.JButton();
        btnDeleteUser = new javax.swing.JButton();
        txtUserName = new javax.swing.JTextField();
        txtPassword = new javax.swing.JTextField();
        lblUserName = new javax.swing.JLabel();
        lblPassword = new javax.swing.JLabel();
        btnClear = new javax.swing.JButton();
        cmbboxEnterprise = new javax.swing.JComboBox();
        lblRole = new javax.swing.JLabel();
        btnViewUser = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setMaximumSize(new java.awt.Dimension(990, 590));
        setMinimumSize(new java.awt.Dimension(990, 590));
        setPreferredSize(new java.awt.Dimension(990, 590));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 990, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2, Short.MAX_VALUE)
        );

        EnterpriseADminJPanel.setBackground(new java.awt.Color(255, 255, 255));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Enterprise Administrators", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Verdana", 0, 14))); // NOI18N

        tblEnterpriseAdmin.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Contact No.", "Email", "Work Address"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblEnterpriseAdmin);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 26, Short.MAX_VALUE))
        );

        lblFirstName.setText("First Name : ");

        lblLastName.setText("Last Name : ");

        lblEmail.setText("Email : ");

        lblPhoneNumber.setText("Phone Number : ");

        lblDateOfBirth.setText("Date of Birth : ");

        lblAddress.setText("Address : ");

        lblWorkAddress.setText("Work Address : ");

        lblGender.setText("Gender : ");

        txtAddress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAddressActionPerformed(evt);
            }
        });

        buttonGroup1.add(radbtnMale);
        radbtnMale.setText("Male");

        buttonGroup1.add(radbtnFemale);
        radbtnFemale.setText("Female");
        radbtnFemale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radbtnFemaleActionPerformed(evt);
            }
        });

        buttonGroup1.add(radbtnNotToSay);
        radbtnNotToSay.setText("Prefer not to say");
        radbtnNotToSay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radbtnNotToSayActionPerformed(evt);
            }
        });

        btnUpdateAdmin.setBackground(new java.awt.Color(255, 255, 255));
        btnUpdateAdmin.setText("Update");
        btnUpdateAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateAdminActionPerformed(evt);
            }
        });

        btnCreateAdmin.setBackground(new java.awt.Color(255, 255, 255));
        btnCreateAdmin.setText("Create");
        btnCreateAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateAdminActionPerformed(evt);
            }
        });

        btnDeleteUser.setBackground(new java.awt.Color(255, 255, 255));
        btnDeleteUser.setText("Delete");
        btnDeleteUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteUserActionPerformed(evt);
            }
        });

        txtUserName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUserNameActionPerformed(evt);
            }
        });

        lblUserName.setText("User Name : ");

        lblPassword.setText("Password: ");

        btnClear.setBackground(new java.awt.Color(255, 255, 255));
        btnClear.setText("Clear");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout EnterpriseADminJPanelLayout = new javax.swing.GroupLayout(EnterpriseADminJPanel);
        EnterpriseADminJPanel.setLayout(EnterpriseADminJPanelLayout);
        EnterpriseADminJPanelLayout.setHorizontalGroup(
            EnterpriseADminJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EnterpriseADminJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(EnterpriseADminJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(EnterpriseADminJPanelLayout.createSequentialGroup()
                        .addGroup(EnterpriseADminJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblFirstName)
                            .addComponent(lblEmail)
                            .addComponent(lblDateOfBirth)
                            .addComponent(lblAddress)
                            .addComponent(lblUserName))
                        .addGap(14, 14, 14)
                        .addGroup(EnterpriseADminJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtAddress)
                            .addComponent(txtDateOfBirth)
                            .addComponent(txtEmail)
                            .addComponent(txtFirstName)
                            .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 102, Short.MAX_VALUE)
                        .addGroup(EnterpriseADminJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(EnterpriseADminJPanelLayout.createSequentialGroup()
                                .addComponent(lblWorkAddress)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(txtWorkAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(EnterpriseADminJPanelLayout.createSequentialGroup()
                                .addGroup(EnterpriseADminJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblPhoneNumber)
                                    .addComponent(lblLastName)
                                    .addComponent(lblGender)
                                    .addComponent(lblPassword))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(EnterpriseADminJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(EnterpriseADminJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(txtPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(EnterpriseADminJPanelLayout.createSequentialGroup()
                                            .addComponent(radbtnMale)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(radbtnFemale)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(radbtnNotToSay))
                                        .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(EnterpriseADminJPanelLayout.createSequentialGroup()
                .addGap(143, 143, 143)
                .addComponent(btnCreateAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(50, 50, 50)
                .addComponent(btnUpdateAdmin, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53)
                .addComponent(btnDeleteUser, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42)
                .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        EnterpriseADminJPanelLayout.setVerticalGroup(
            EnterpriseADminJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(EnterpriseADminJPanelLayout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(EnterpriseADminJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblUserName)
                    .addComponent(lblPassword)
                    .addComponent(txtUserName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addGroup(EnterpriseADminJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFirstName)
                    .addComponent(lblLastName)
                    .addComponent(txtFirstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtLastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(EnterpriseADminJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmail)
                    .addComponent(lblPhoneNumber)
                    .addComponent(txtEmail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPhoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(EnterpriseADminJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblDateOfBirth)
                    .addComponent(lblGender)
                    .addComponent(txtDateOfBirth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(radbtnMale)
                    .addComponent(radbtnFemale)
                    .addComponent(radbtnNotToSay))
                .addGap(18, 18, 18)
                .addGroup(EnterpriseADminJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblAddress)
                    .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtWorkAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblWorkAddress))
                .addGap(18, 18, 18)
                .addGroup(EnterpriseADminJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreateAdmin)
                    .addComponent(btnUpdateAdmin)
                    .addComponent(btnDeleteUser)
                    .addComponent(btnClear))
                .addContainerGap(63, Short.MAX_VALUE))
        );

        cmbboxEnterprise.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbboxEnterpriseActionPerformed(evt);
            }
        });

        lblRole.setText("Enterprise: ");

        btnViewUser.setBackground(new java.awt.Color(255, 255, 255));
        btnViewUser.setText("View User");
        btnViewUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewUserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblRole)
                        .addGap(18, 18, 18)
                        .addComponent(cmbboxEnterprise, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(457, 457, 457)
                        .addComponent(btnViewUser, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(31, 31, 31))
                    .addComponent(EnterpriseADminJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbboxEnterprise, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblRole, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnViewUser)))
                .addGap(18, 18, 18)
                .addComponent(EnterpriseADminJPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void radbtnFemaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radbtnFemaleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radbtnFemaleActionPerformed

    private void radbtnNotToSayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radbtnNotToSayActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_radbtnNotToSayActionPerformed

    private void txtAddressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAddressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAddressActionPerformed

    private void btnUpdateAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateAdminActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblEnterpriseAdmin.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(null, "Please select a record to view admin details");
        }
        
        UserAccount selectedUser = (UserAccount) tblEnterpriseAdmin.getValueAt(selectedRowIndex, 0);
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String selectedEnterpriseAdmin = cmbboxEnterprise.getSelectedItem()!=null ? String.valueOf(cmbboxEnterprise.getSelectedItem()) : null;

        try {
            String userName = txtUserName.getText();
            String phoneNumber = txtPhoneNumber.getText();
            String email = txtEmail.getText();

            Matcher emailMatcher = emailPattern.matcher(email);
            Matcher phoneRegexMatcher = phonePattern.matcher(phoneNumber);
            
            //add address and work address
            if (StringUtils.isBlank(email) || !emailMatcher.matches()) {
                //add regex validations
                JOptionPane.showMessageDialog(this, "Please enter a valid email");
                return;
            } else if (StringUtils.isBlank(phoneNumber) || !phoneRegexMatcher.matches()) {
                JOptionPane.showMessageDialog(this, "Please enter a valid phone number");
                return;
            }
            //add validation for address
            boolean isUpdated=false;
            
            for(Network network : system.getNetworkList()){
                this.enterpriseDirectory = network.getEnterpriseDirectory();
                if(enterpriseDirectory!=null){
                    for (Enterprise enterprise : enterpriseDirectory.getEnterpriseList()) {
                        if (enterprise != null && StringUtils.equalsIgnoreCase(enterprise.getEnterpriseType().getValue(), selectedEnterpriseAdmin)) {
                            UserAccountDirectory accountDirectory = enterprise.getUserAccountDirectory();
                            if(accountDirectory != null && CollectionUtils.isNotEmpty(accountDirectory.getUserAccountList())){
                                for(UserAccount account: accountDirectory.getUserAccountList()){
                                    if(account != null && account.equals(selectedUser)){
                                        Profile profile = account.getProfileDetails();
                                        if(profile!=null){
                                            profile.setEmail(email);
                                            profile.setPhone(Long.valueOf(phoneNumber));
        //                                    profile.setHomeAddress(homeAddress);
        //                                    profile.setWorkAddress(workAddress);
                                            account.setProfileDetails(profile);
                                            isUpdated = true;
                                            JOptionPane.showMessageDialog(this, "User details updated Successfull!!");
                                        }
                                        break;
                                    }
                                }
                                enterprise.setUserAccountDirectory(accountDirectory);
                            }
                            if (!isUpdated) {
                                JOptionPane.showMessageDialog(this, "User updation failed");
                                return;
                            }
                            break;
                        }
                    }
                }                
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Enter a valid date of birth in yyyy-MM-dd.");
        }
        populateEnterpriseAdminTable(String.valueOf(cmbboxEnterprise.getSelectedItem()));
        txtUserName.setEnabled(true);
        txtPassword.setEnabled(true);
        txtDateOfBirth.setEnabled(true);
        txtPassword.setEnabled(true);
    }//GEN-LAST:event_btnUpdateAdminActionPerformed

    private void btnDeleteUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteUserActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblEnterpriseAdmin.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(null, "Please select a record to view admin details");
            return;
        }
        
        UserAccount selectedUser = (UserAccount) tblEnterpriseAdmin.getValueAt(selectedRowIndex, 0);
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String selectedEnterpriseAdmin = cmbboxEnterprise.getSelectedItem()!=null ? String.valueOf(cmbboxEnterprise.getSelectedItem()) : null;

        try {
            //add validation for address
            boolean isUpdated=false;
            for(Network network : system.getNetworkList()){
                this.enterpriseDirectory = network.getEnterpriseDirectory();
                if(enterpriseDirectory!=null){
                    for (Enterprise enterprise : enterpriseDirectory.getEnterpriseList()) {
                        if (enterprise != null && StringUtils.equalsIgnoreCase(enterprise.getEnterpriseType().getValue(), selectedEnterpriseAdmin)) {
                            UserAccountDirectory accountDirectory = enterprise.getUserAccountDirectory();
                            if(accountDirectory != null && CollectionUtils.isNotEmpty(accountDirectory.getUserAccountList())){
                                if(accountDirectory.removeUserAccount(selectedUser)){
                                    JOptionPane.showMessageDialog(this, "User details deleted Successfully!!");
                                }else {
                                    JOptionPane.showMessageDialog(this, "User details delete operation failed!!");
                                }
                            }
                            break;
                        }
                    }                    
                }
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Enter a valid date of birth in yyyy-MM-dd.");
        }
        populateEnterpriseAdminTable(String.valueOf(cmbboxEnterprise.getSelectedItem()));        
    }//GEN-LAST:event_btnDeleteUserActionPerformed

    private void cmbboxEnterpriseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbboxEnterpriseActionPerformed
        // TODO add your handling code here:
        String selectedEnterpriseAdmin = cmbboxEnterprise.getSelectedItem()!=null ? String.valueOf(cmbboxEnterprise.getSelectedItem()) : null;
        if(StringUtils.isNotBlank(selectedEnterpriseAdmin)){
            populateEnterpriseAdminTable(selectedEnterpriseAdmin);
        }
    }//GEN-LAST:event_cmbboxEnterpriseActionPerformed

    private void btnCreateAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateAdminActionPerformed
        // TODO add your handling code here:
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String selectedEnterpriseAdmin = cmbboxEnterprise.getSelectedItem()!=null ? String.valueOf(cmbboxEnterprise.getSelectedItem()) : null;

        try {
            String userName = txtUserName.getText();
            String password = txtPassword.getText();
            String firstName = txtFirstName.getText();
            String lastName = txtLastName.getText();
            String phoneNumber = txtPhoneNumber.getText();
            String email = txtEmail.getText();
            Date dob = simpleDateFormat.parse(String.valueOf(txtDateOfBirth.getText()));
            String gender = buttonGroup1.getSelection().getActionCommand();
            
            Matcher emailMatcher = emailPattern.matcher(email);
            Matcher phoneRegexMatcher = phonePattern.matcher(phoneNumber);
            Matcher passworMatcher = passwordPattern.matcher(password);        
            
            //add address and work address
            if (StringUtils.isBlank(userName)) {
                JOptionPane.showMessageDialog(this, "Please enter a valid user Name");
                return;
            } else if (StringUtils.isBlank(password) || !passworMatcher.matches()) {
                JOptionPane.showMessageDialog(this, "Please enter a valid password");
                return;
            } else if (StringUtils.isBlank(firstName)) {
                JOptionPane.showMessageDialog(this, "Please enter a valid first Name");
                return;
            } else if (StringUtils.isBlank(lastName)) {
                JOptionPane.showMessageDialog(this, "Please enter a valid last Name");
                return;
            } else if (StringUtils.isBlank(email) || !emailMatcher.matches()) {
                //add regex validations
                JOptionPane.showMessageDialog(this, "Please enter a valid email");
                return;
            } else if (StringUtils.isBlank(phoneNumber) || !phoneRegexMatcher.matches()) {
                JOptionPane.showMessageDialog(this, "Please enter a valid phone number");
                return;
            } else if (StringUtils.isBlank(gender)) {
                JOptionPane.showMessageDialog(this, "Please select an option for gender");
                return;
            }
            //add validation for address

            UserAccount userAccount = null;
            for (Enterprise enterprise : enterpriseDirectory.getEnterpriseList()) {
                if (enterprise != null && StringUtils.equalsIgnoreCase(enterprise.getEnterpriseType().getValue(), selectedEnterpriseAdmin)) {
                    UserAccountDirectory accountDirectory = enterprise.getUserAccountDirectory();
                    if(accountDirectory!=null && accountDirectory.checkIfUsernameIsUnique(userName)){
                        Profile userProfile = new Profile(firstName, lastName, gender, email, Long.valueOf(phoneNumber), dob, null);
                        Role role = null;
                        switch(enterprise.getEnterpriseType().getValue()){
                            case "Enterprise911":
                                role = new Enterprise911Admin();
                                break;
                            case "FirstResponderEnterprise":
                                role = new FirstRespAdmin();
                                break;                                
                            case "HealthcareEnterprise":
                                role = new HealthCareAdmin();
                                break;                                
                        }
                        if(role != null){
                            userAccount = accountDirectory.createUserAccount(userName, password, role, userProfile);
                        }
                        if (userAccount == null) {
                            JOptionPane.showMessageDialog(this, "User creation failed");
                        }
                        enterprise.setUserAccountDirectory(accountDirectory);
                    }else {
                        JOptionPane.showMessageDialog(this, "Enter a unique user name");
                        return;
                    }
                    break;
                }
            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Enter a valid date of birth in yyyy-MM-dd.");
        }
        populateEnterpriseAdminTable(String.valueOf(cmbboxEnterprise.getSelectedItem()));
    }//GEN-LAST:event_btnCreateAdminActionPerformed

    private void txtUserNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUserNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUserNameActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void btnViewUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewUserActionPerformed
        // TODO add your handling code here:
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        int selectedRowIndex = tblEnterpriseAdmin.getSelectedRow();
        if (selectedRowIndex < 0) {
            JOptionPane.showMessageDialog(null, "Please select a record to view admin details");
            return;
        }

        UserAccount userAccount = (UserAccount) tblEnterpriseAdmin.getValueAt(selectedRowIndex, 0);
        if (userAccount != null) {
            Profile adminProfile = userAccount.getProfileDetails();
            txtUserName.setText(userAccount.getUsername());
            txtPassword.setText(userAccount.getPassword());
            txtFirstName.setText(adminProfile.getFirstName());
            txtLastName.setText(adminProfile.getLastName());
            txtPhoneNumber.setText(String.valueOf(adminProfile.getPhone()));
            txtEmail.setText(adminProfile.getEmail());
            txtDateOfBirth.setText(simpleDateFormat.format(adminProfile.getDob()));
            if (adminProfile.getHomeAddress() != null) {
                txtAddress.setText(adminProfile.getHomeAddress().toString());
            }
            if (adminProfile.getWorkAddress() != null) {
                txtAddress.setText(adminProfile.getWorkAddress().toString());
            }
            switch (adminProfile.getGender()) {
                case "Male":
                    buttonGroup1.setSelected(radbtnMale.getModel(), true);
                    break;
                case "Female":
                    buttonGroup1.setSelected(radbtnFemale.getModel(), true);
                    break;
                case "Prefer not to say":
                    buttonGroup1.setSelected(radbtnNotToSay.getModel(), true);
                    break;
            }
        }
        btnUpdateAdmin.setEnabled(true);
        btnCreateAdmin.setEnabled(false);
        txtUserName.setEnabled(false);
        txtPassword.setEnabled(false);
        txtDateOfBirth.setEnabled(false);
        txtPassword.setEnabled(false);        
    }//GEN-LAST:event_btnViewUserActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        // TODO add your handling code here:
        clearAllFields();
        btnUpdateAdmin.setEnabled(false);
        btnCreateAdmin.setEnabled(true);        
    }//GEN-LAST:event_btnClearActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel EnterpriseADminJPanel;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnCreateAdmin;
    private javax.swing.JButton btnDeleteUser;
    private javax.swing.JButton btnUpdateAdmin;
    private javax.swing.JButton btnViewUser;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cmbboxEnterprise;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAddress;
    private javax.swing.JLabel lblDateOfBirth;
    private javax.swing.JLabel lblEmail;
    private javax.swing.JLabel lblFirstName;
    private javax.swing.JLabel lblGender;
    private javax.swing.JLabel lblLastName;
    private javax.swing.JLabel lblPassword;
    private javax.swing.JLabel lblPhoneNumber;
    private javax.swing.JLabel lblRole;
    private javax.swing.JLabel lblUserName;
    private javax.swing.JLabel lblWorkAddress;
    private javax.swing.JRadioButton radbtnFemale;
    private javax.swing.JRadioButton radbtnMale;
    private javax.swing.JRadioButton radbtnNotToSay;
    private javax.swing.JTable tblEnterpriseAdmin;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtDateOfBirth;
    private javax.swing.JTextField txtEmail;
    private javax.swing.JTextField txtFirstName;
    private javax.swing.JTextField txtLastName;
    private javax.swing.JTextField txtPassword;
    private javax.swing.JTextField txtPhoneNumber;
    private javax.swing.JTextField txtUserName;
    private javax.swing.JTextField txtWorkAddress;
    // End of variables declaration//GEN-END:variables

    private void populateEnterpriseCmbbox() {
        cmbboxEnterprise.removeAllItems();
        Arrays.asList(Enterprise.EnterpriseType.values()).stream().
                filter(enterprise -> !StringUtils.equalsIgnoreCase(enterprise.getValue(), Enterprise.EnterpriseType.VoluntaryEnterprise.getValue()))
                .forEach(enterprise -> cmbboxEnterprise.addItem(enterprise.getValue()));
        cmbboxEnterprise.setSelectedIndex(0);
    }

    private void populateEnterpriseAdminTable(String selectedEnterpriseAdmin) {
        DefaultTableModel enterpriseAdminTableModel = (DefaultTableModel) tblEnterpriseAdmin.getModel();
        enterpriseAdminTableModel.setRowCount(0);

        if(enterpriseDirectory != null){
            for(Enterprise enterprise: enterpriseDirectory.getEnterpriseList()){
                if(StringUtils.equalsIgnoreCase(enterprise.getEnterpriseType().getValue(), selectedEnterpriseAdmin)){
                    UserAccountDirectory userAccountDirectory = enterprise.getUserAccountDirectory();
                    if (userAccountDirectory != null) {
                        List<UserAccount> enterpriseAdminUsers = userAccountDirectory.getUserAccountList();
                        if (CollectionUtils.isNotEmpty(enterpriseAdminUsers)) {
                            for (UserAccount user : enterpriseAdminUsers) {
                                Profile profile = user.getProfileDetails();
                                Object row[] = new Object[4];
                                row[0] = user;
                                row[1] = profile.getPhone();
                                row[2] = profile.getEmail();
                                row[3] = profile.getWorkAddress();
                                enterpriseAdminTableModel.addRow(row);
                            }
                        }
                    }                
                }
            }
        }
        system.setNetworkList(networkList);
        btnUpdateAdmin.setEnabled(false);
        btnCreateAdmin.setEnabled(true);
        clearAllFields();
    }

    private void clearAllFields() {
        txtUserName.setText("");
        txtPassword.setText("");
        txtFirstName.setText("");
        txtLastName.setText("");
        txtPhoneNumber.setText("");
        txtEmail.setText("");
        txtDateOfBirth.setText("");
        txtAddress.setText("");
        txtWorkAddress.setText("");
        buttonGroup1.clearSelection();
    }
}
